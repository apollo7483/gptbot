AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  DemoName:
    Type: String
    Default: my-demo-chat
    MinLength: 3
    MaxLength: 50
Resources:
  #Auth
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${DemoName}-user-pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpLambda.Arn
        PostConfirmation: !GetAtt PostConfirmationLambda.Arn
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  PostConfirmationLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs16.x
      Timeout: 100
      Handler: index.handler
      CodeUri: handlers/postConfirmation
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:PutLogEvents
                - logs:CreateLogGroup
                - logs:CreateLogStream
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: "*"

  PostConfirmationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !GetAtt UserPool.Arn

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${DemoName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  #Creates a federated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${DemoName}-IdentityPool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  # Create a role for unauthorized access to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
  # Create a role for authorized access to AWS resources. Control what your user can access.
  # Allows users to access their s3 ChatBucket files
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Description: The Role Cognito gives users.  Same as AuthLambdaUserRole that credential service gives to users except with cognito sub param
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  #Lambda Role
  LambdaExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: auth-lambdarole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  #API GATEWAY
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      DefinitionBody:
        swagger: "2.0"
        schemes:
          - https
        paths:
          /list:
            get:
              summary: Return role
              responses: {}
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getRole.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: when_no_templates
          /send:
            post:
              summary: Send Message
              responses: {}
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessages.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: when_no_templates
          /update:
            post:
              summary: Update Role
              responses: {}
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRole.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: when_no_templates

  getRole:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs16.x
      Timeout: 100
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /list
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
      Handler: index.handler
      CodeUri: handlers/getRole
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApplicationTable

  sendMessages:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs16.x
      Timeout: 100
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /send
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Handler: index.handler
      CodeUri: handlers/editProfile
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationTable

  updateRole:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs16.x
      Timeout: 100
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /update
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Handler: index.handler
      CodeUri: handlers/updateRole
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationTable

  #DynamoDB FOR API GATEWAY
  ApplicationTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "userID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "2"
        WriteCapacityUnits: "2"

Outputs:
  CognitoUserPoolId:
    Value: !Ref UserPool
  CognitoAppClientId:
    Value: !Ref UserPoolClient
  CognitoIdentityPoolId:
    Value: !Ref IdentityPool
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
